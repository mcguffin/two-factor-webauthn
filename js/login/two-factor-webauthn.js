!function(){var n={};(function(e){"use strict";var t;(t="undefined"!=typeof window?window.jQuery:void 0!==e?e.jQuery:null)&&t.__esModule;n={login:function(n,e){n.action;var t,o,a,r,i=n.payload;n._wpnonce,o=function(n,t){e({success:n,result:t})},a=(t=i).challenge,(r=Object.assign({},t)).challenge=new Uint8Array(t.challenge),r.allowCredentials=r.allowCredentials.map(function(n){var e=Object.assign({},n);return e.id=new Uint8Array(n.id),e}),navigator.credentials.get({publicKey:r}).then(function(n){var e=[];new Uint8Array(n.rawId).forEach(function(n){e.push(n)});var t=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(n.response.clientDataJSON))),r=[];new Uint8Array(n.response.clientDataJSON).forEach(function(n){r.push(n)});var i=[];new Uint8Array(n.response.authenticatorData).forEach(function(n){i.push(n)});var l=[];new Uint8Array(n.response.signature).forEach(function(n){l.push(n)});var u={type:n.type,originalChallenge:a,rawId:e,response:{authenticatorData:i,clientData:t,clientDataJSONarray:r,signature:l}};o(!0,JSON.stringify(u))}).catch(function(n){"name"in n?"NotAllowedError"==n.name?o(!1,"not-allowed"):"AbortError"==n.name||"NS_ERROR_ABORT"==n.name?o(!1,"abort"):o(!1,n.toString()):o(!1,n.toString())})}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),function(e){"use strict";var t,o=(t="undefined"!=typeof window?window.jQuery:void 0!==e?e.jQuery:null)&&t.__esModule?t:{default:t};window.webauthnL10n||console.error("webauthL10n is not defined"),(0,o.default)(document).ready(function(){return function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;(0,n.login)(window.webauthnL10n,function(n){n.success?((0,o.default)("#webauthn_response").val(n.result),(0,o.default)("#loginform").submit()):t<5&&"not-allowed"===n.result?(setTimeout(function(){return e(t+1)},750),console.warn("Failed to connect to hardware. Attempt",t,"of",5)):console.error("Authentication Failed",n.result,t)})}()})}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,