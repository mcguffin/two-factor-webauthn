!function(){var n={};(function(e){"use strict";(t="undefined"!=typeof window?window.jQuery:void 0!==e?e.jQuery:null)&&t.__esModule;var t,a="credentials"in navigator;n={login:function(n,e){n.action;var t=n.payload;n._wpnonce,function(n,e){var t=n.challenge,a=Object.assign({},n);a.challenge=new Uint8Array(n.challenge),a.allowCredentials=a.allowCredentials.map(function(n){var e=Object.assign({},n);return e.id=new Uint8Array(n.id),e}),navigator.credentials.get({publicKey:a}).then(function(n){var a=[];new Uint8Array(n.rawId).forEach(function(n){a.push(n)});var i=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(n.response.clientDataJSON))),r=[];new Uint8Array(n.response.clientDataJSON).forEach(function(n){r.push(n)});var o=[];new Uint8Array(n.response.authenticatorData).forEach(function(n){o.push(n)});var u=[];new Uint8Array(n.response.signature).forEach(function(n){u.push(n)});var l={type:n.type,originalChallenge:t,rawId:a,response:{authenticatorData:o,clientData:i,clientDataJSONarray:r,signature:u}};e(!0,JSON.stringify(l))}).catch(function(n){console.log(n),e(!1,"name"in n?n.name+": "+n.message:n.toString())})}(t,function(n,t){e(n?{success:!0,result:t}:{success:!1,message:t})})},isWebauthnSupported:a}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),function(e){"use strict";var t,a=(t="undefined"!=typeof window?window.jQuery:void 0!==e?e.jQuery:null)&&t.__esModule?t:{default:t},i=function(){(0,a.default)(".webauthn-retry").removeClass("visible"),(0,n.login)(window.webauthnL10n,function(n){n.success?((0,a.default)("#webauthn_response").val(n.result),(0,a.default)("#loginform").submit()):(0,a.default)(".webauthn-retry").addClass("visible")})};window.webauthnL10n||console.error("webauthL10n is not defined"),n.isWebauthnSupported?(0,a.default)(document).ready(function(){return i()}).on("click",".webauthn-retry-link",function(){return i()}):(0,a.default)(".webauthn-unsupported").addClass("visible")}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,