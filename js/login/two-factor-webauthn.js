!function(){var e={};(function(n){"use strict";(a="undefined"!=typeof window?window.jQuery:void 0!==n?n.jQuery:null)&&a.__esModule;var a,t="credentials"in navigator;e={login:function(e,n){e.action;var a=e.payload;e._wpnonce,function(e,n){var a=e.challenge,t=Object.assign({},e);t.challenge=new Uint8Array(e.challenge),t.allowCredentials=t.allowCredentials.map(function(e){var n=Object.assign({},e);return n.id=new Uint8Array(e.id),n}),navigator.credentials.get({publicKey:t}).then(function(e){var t=[];new Uint8Array(e.rawId).forEach(function(e){t.push(e)});var i=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(e.response.clientDataJSON))),o=[];new Uint8Array(e.response.clientDataJSON).forEach(function(e){o.push(e)});var r=[];new Uint8Array(e.response.authenticatorData).forEach(function(e){r.push(e)});var l=[];new Uint8Array(e.response.signature).forEach(function(e){l.push(e)});var u={type:e.type,originalChallenge:a,rawId:t,response:{authenticatorData:r,clientData:i,clientDataJSONarray:o,signature:l}};n(!0,JSON.stringify(u))}).catch(function(e){console.log(e),n(!1,"name"in e?e.name+": "+e.message:e.toString())})}(a,function(e,a){n(e?{success:!0,result:a}:{success:!1,message:a})})},isWebauthnSupported:t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),function(n){"use strict";var a,t=(a="undefined"!=typeof window?window.jQuery:void 0!==n?n.jQuery:null)&&a.__esModule?a:{default:a},i=function(){(0,t.default)(".webauthn-retry").removeClass("visible"),(0,e.login)(window.webauthnL10n,function(e){e.success?((0,t.default)("#webauthn_response").val(e.result),(0,t.default)("#loginform").submit()):(0,t.default)(".webauthn-retry").addClass("visible")})};window.webauthnL10n||console.error("webauthL10n is not defined"),e.isWebauthnSupported?(0,t.default)(document).ready(i).on("click",".webauthn-retry-link",i):(0,t.default)(".webauthn-unsupported").addClass("visible")}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,